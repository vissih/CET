//@version=5
indicator("testing", overlay = true, max_bars_back = 500)

//engulfing candle code
//start

var float openBarPrevious = na
var float closeBarPrevious = na
var float openBarCurrent = na
var float closeBarCurrent = na

if bar_index > 0
    openBarPrevious := open[1]
    closeBarPrevious := close[1]

openBarCurrent := open
closeBarCurrent := close

bullishEngulfing = (openBarCurrent <= closeBarPrevious) and (openBarCurrent < openBarPrevious) and (closeBarCurrent > openBarPrevious)
bearishEngulfing = (openBarCurrent >= closeBarPrevious) and (openBarCurrent > openBarPrevious) and (closeBarCurrent < openBarPrevious)

plotshape(bullishEngulfing, style = shape.triangleup, location = location.belowbar, color = color.green, size = size.tiny)
plotshape(bearishEngulfing, style = shape.triangledown, location = location.abovebar, color = color.red, size = size.tiny)

alertcondition(bullishEngulfing, title = "Bullish Engulfing", message = "[CurrencyPair] [TimeFrame], Bullish candle engulfing previous candle")
alertcondition(bearishEngulfing, title = "Bearish Engulfing", message = "[CurrencyPair] [TimeFrame], Bearish candle engulfing previous candle")

//end

//halftrend code
//start

amplitude = input.int(title="Amplitude", defval=2)
channelDeviation = input.int(title="Channel Deviation", defval=2)
showArrows = input.bool(title="Show Arrows", defval=true)
showChannels = input.bool(title="Show Channels", defval=true)

var trend = 0
var nextTrend = 0
var maxLowPrice = na(low[1]) ? low : low[1]
var minHighPrice = na(high[1]) ? high : high[1]

var float up = 0.0
var float down = 0.0
var float atrHigh = 0.0
var float atrLow = 0.0
var float arrowUp = na
var float arrowDown = na

atr2 = ta.atr(100) / 2
dev = channelDeviation * atr2

highPrice = high[math.abs(ta.highestbars(amplitude))]
lowPrice = low[math.abs(ta.lowestbars(amplitude))]
highma = ta.sma(high, amplitude)
lowma = ta.sma(low, amplitude)

if nextTrend == 1
    maxLowPrice := math.max(lowPrice, maxLowPrice)
    if highma < maxLowPrice and close < low[1]
        trend := 1
        nextTrend := 0
        minHighPrice := highPrice
else
    minHighPrice := math.min(highPrice, minHighPrice)
    if lowma > minHighPrice and close > high[1]
        trend := 0
        nextTrend := 1
        maxLowPrice := lowPrice

if trend == 0
    if not na(trend[1]) and trend[1] != 0
        up := na(down[1]) ? down : down[1]
        arrowUp := up - atr2
    else
        up := na(up[1]) ? maxLowPrice : math.max(maxLowPrice, up[1])
    atrHigh := up + dev
    atrLow := up - dev
else
    if not na(trend[1]) and trend[1] != 1 
        down := na(up[1]) ? up : up[1]
        arrowDown := down + atr2
    else
        down := na(down[1]) ? minHighPrice : math.min(minHighPrice, down[1])
    atrHigh := down + dev
    atrLow := down - dev

ht = trend == 0 ? up : down

var color buyColor = color.blue
var color sellColor = color.red

htColor = trend == 0 ? buyColor : sellColor
htPlot = plot(ht, title="HalfTrend", linewidth=2, color=htColor)

atrHighPlot = plot(showChannels ? atrHigh : na, title="ATR High", style=plot.style_circles, color=sellColor)
atrLowPlot = plot(showChannels ? atrLow : na, title="ATR Low", style=plot.style_circles, color=buyColor)

fill(htPlot, atrHighPlot, title="ATR High Ribbon", color=sellColor)
fill(htPlot, atrLowPlot, title="ATR Low Ribbon", color=buyColor)

buySignal = not na(arrowUp) and (trend == 0 and trend[1] == 1)
sellSignal = not na(arrowDown) and (trend == 1 and trend[1] == 0)

plotshape(showArrows and buySignal ? atrLow : na, title="Arrow Up", style=shape.triangleup, location=location.absolute, size=size.tiny, color=buyColor)
plotshape(showArrows and sellSignal ? atrHigh : na, title="Arrow Down", style=shape.triangledown, location=location.absolute, size=size.tiny, color=sellColor)

alertcondition(buySignal, title="Alert: HalfTrend Buy", message="HalfTrend Buy")
alertcondition(sellSignal, title="Alert: HalfTrend Sell", message="HalfTrend Sell")

//end

//zigzag waves
//start

//indicator('Zigzag Chart Points', 'ZCP', true, max_bars_back = 500)

// 0. Inputs
// 1. Variables and arrays
// 2. Map
// 3. Switches
// 4. Methods
// 5. Executions

//#region ———————————————————— 0. Inputs
G0         = 'Main Settings'
T0         = 'Zigzag values\nDefault : 14\nMin : 2\nMax : 50'
length     = input.int(            14,      'Length', group = G0, minval = 2, maxval = 50, tooltip = T0)
colorUp    = input.color(color.lime,       'Trend', group = G0, inline = '0')
colorDn    = input.color( color.red,            '', group = G0, inline = '0')

G1         = 'Line Settings'
T1         = 'Default\nStyle : Solid\nWidth : 4'
showLine   = input.bool(         true, 'Show / hide', group = G1)
lineType   = input.string(    'solid',       'Style', group = G1, options = ['dash', 'dot', 'solid', 'arrow right', 'arrow left'])
extendType = input.string(    'none',       'Extend', group = G1, options = ['left', 'right', 'both', 'none'])
width      = input.int(             4,       'Width', group = G1, minval = 1, maxval = 4, tooltip = T1)

G2         = 'Label Settings'
T2         = 'Small font size recommended for mobile app or multiple layout'
showLabel  = input.bool(         true, 'Show / hide', group = G2)
fontSize   = input.string(   'normal',        'Size', group = G2, options = ['tiny',  'small', 'normal', 'large', 'huge'], tooltip = T2)
//#endregion

//#region ———————————————————— 1. Variables and arrays
float ph      = na,  ph := ta.highestbars(high, length) == 0 ? high : na
float pl      = na,  pl := ta.lowestbars(  low, length) == 0 ?  low : na  
var  dir      =  0, dir := not na(ph) and na(pl) ? 1 : not na(pl) and na(ph) ? -1 : dir
var zigzag    = array.new<chart.point>(0)
oldzigzag     = zigzag.copy()
dirchanged    = dir[0] != dir[1]
var arraySize = 10
//#endregion

//#region ———————————————————— 2. Map
// Create map for label's tooltip
tip = map.new<string, string>()
tip.put('HH', 'HIGHER HIGH')
tip.put('LH', 'LOWER HIGH')
tip.put('LL', 'LOWER LOW')
tip.put('HL', 'HIGHER LOW')
//#endregion

//#region ———————————————————— 3. Switches
switchLine        = switch lineType
    'dash'        => line.style_dashed
    'dot'         => line.style_dotted
    'solid'       => line.style_solid
    'arrow right' => line.style_arrow_right
    'arrow left'  => line.style_arrow_left
switchExtend      = switch extendType
    'left'        => extend.left
    'right'       => extend.right
    'both'        => extend.both
    'none'        => extend.none
//#endregion

//#region ———————————————————— 4. Methods
// @function     addPoint
// @param           price   float value
// @param           index   int value
// @param       arraySize   array size for chart.point[]
// @returns chart.point[] 
method addPoint(chart.point[] id, float price = na, int index = na, int arraySize = na) =>
    id.unshift(chart.point.new(time, index, price))
    if id.size() > arraySize
        id.pop()

// @function updatePoints
// @param           price   float value
// @param           index   int value
// @param       arraySize   array size for chart.point[]
// @param             dir   int value
// @returns chart.point[] 
method updatePoints(chart.point[] id, float price = na, int index = na, int arraySize = na, int dir = na) =>
    if id.size() == 0
        id.addPoint(price, index)
    else
        if dir == 1 and price > id.get(0).price or dir == -1 and price < id.get(0).price 
            id.set(0, chart.point.new(time, index, price))
        chart.point.new(na, na, na)
//#endregion

//#region ———————————————————— 5. Executions
if na(ph) or na(pl)
    if dirchanged
        zigzag.addPoint(dir == 1 ? ph : pl, bar_index, arraySize)
    else
        zigzag.updatePoints(dir == 1 ? ph : pl, bar_index, arraySize, dir)

if zigzag.size() >= 3 and oldzigzag.size() >= 3
    var line  linezigzag  = na
    var label labelzigzag = na
    if     zigzag.get(0).index != oldzigzag.get(0).index or  zigzag.get(0).price != oldzigzag.get(0).price
        if zigzag.get(1).index == oldzigzag.get(1).index and zigzag.get(1).price == oldzigzag.get(1).price
            linezigzag.delete()
            labelzigzag.delete()
        if showLine
            linezigzag  := line.new(
                                     first_point  = zigzag.get(0),
                                     second_point = zigzag.get(1),
                                     xloc         = xloc.bar_index,
                                     extend       = switchExtend,
                                     color        = dir == 1 ? colorUp : colorDn,
                                     style        = switchLine,
                                     width        = width)
        if showLabel
            textzigzag   = dir == 1 ?    zigzag.get(0).price > zigzag.get(2).price ? 'HH'    : 'LH' :
                                         zigzag.get(0).price < zigzag.get(2).price ? 'LL'    : 'HL'
            colorzigzag  = dir == 1 ?    zigzag.get(0).price > zigzag.get(2).price ? colorDn : colorUp :
                                         zigzag.get(0).price < zigzag.get(2).price ? colorUp : colorDn
            currentRes   = timeframe.isintraday ? 'dd-MMM-yyyy HH:mm' : 'dd-MMM-yyyy'
            labelzigzag := label.new(
                                     point     = zigzag.get(0),
                                     text      =  textzigzag,
                                     xloc      = xloc.bar_index,
                                     style     = dir == 1 ? label.style_label_down : label.style_label_up,
                                     color     = color.new(color.blue, 100),
                                     textcolor = colorzigzag,
                                     size      = fontSize,
                                     tooltip   = tip.get(textzigzag) + '\n' +
                                                 'Time  : ' + str.format_time(zigzag.get(0).time, currentRes, syminfo.timezone)+ '\n' +
                                                 'Price : ' + str.tostring(zigzag.get(0).price))
//#endregion

//end